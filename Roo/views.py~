# import statements
from Roo import app
from Roo.CASClient import CASClient
from Roo.database import db_session
from Roo.models import User, Bag, Order
from flask import Flask, request, session, g, redirect, url_for, \
	abort, render_template, flash
from flask_oauth import OAuth
from flask.ext.mail import Message
from Roo import mail
import time, ast
from werkzeug.wrappers import BaseResponse
from functools import wraps

# decorator function for logging in
def with_netid(f):
  @wraps(f)
  def decorated_function(*args, **kwargs):
    C = CASClient()
    netid = C.Authenticate()
    if isinstance(netid, BaseResponse):
      return netid
    return f(netid, *args, **kwargs)
  return decorated_function

@app.errorhandler(401) # if user tries to access a page while not logged on
def login_first(e):
  return redirect(url_for('fblogin'))

# opening page of the site.  
@app.route('/index')
def index():
  return render_template('index.html')

@app.route('/internals')
def internals():
  return render_template('internals.html')

@app.route('/report')
def report():
  return render_template('report.html')

@app.route('/')
def fblogin():
  # if not logged in, redirect to facebook
  if not session.get('logged_in'):
    return render_template('login.html')
  # if already logged in, redirect to home.
  else:
    return redirect(url_for('home'))

# Princeton CAS login authentication.
@app.route('/cas')
@with_netid
def cas(netid):
  user = User.query.filter_by(id = session['userid']).first()
  user.isauthenticated = True # once CAS authentication happens, user is authenticated forever (but still needs to Facebook login)
  session['logged_in'] = True
  db_session.commit()
  return redirect(url_for('home'))


# for all these email notifications we keep in the app.route for debugging purposes so that we can email on demand w/o heroku scheduler

# Email notifications to users with orders telling them to pay for their order
# Happens weekly using Heroku Scheduler
@app.route('/payemail')
def payemail():
  # Send emails to purchase bags every Friday ( 12 noon )
  localtime = time.localtime(time.time())
  dayoftheweek = localtime[6]
#  if dayoftheweek == 5:  # 5 = Friday

  if dayoftheweek < 10000: # for testing, we're ignoring day of the week
    bags = Bag.query.all()
    for bag in bags:
      subject = "Milkman order for %s" % bag.store
      if len(bag.users) == 1: # if no one else joined the crate
        # send apology message
        msg = Message(recipients=[bag.users[0].email], subject=subject, sender="themilkmanipping@gmail.com")
        msg.html = "Sorry, no one else joined your Milkman crate :(. Just go ahead and order it on your own. Better luck next week!" 
        mail.send(msg)
      msgtext = None
      if bag.amountinbag >= bag.threshold: # if crate meets minimum for free shipping
        msgtext = "The Milkman has delivered: your crate for %s meets the minimum for free shipping!<br>" % bag.store
      else:
        msgtext = "While your Milkman crate for %s did not meet the minimum for free shipping, you can still save on shipping by ordering together!<br>" % bag.store
      if len(bag.users) > 1: # if crate has many users
        # crate leader (person who receives shipment) is some user who clicked "ship to me"...if no one clicked "ship to me", it is the first person who joined the crate
        bagleader = bag.users[0]
        for order in bag.orders:
          if order.ship == True:
            bagleader = order.user
        recipients = [bagleader.email]
        leadermsg = "As soon as everyone in the crate pays The Milkman via paypal, we will order the crate and have it shipped to you (" + bagleader.firstname + "). You you will be in charge of distributing the individual orders to everyone in the crate. Here are the orders in the crate: <br><hr>"
        for order in bag.orders: # tell the crate leader everyone's orders
          leadermsg = leadermsg + "User: " + order.user.firstname + " " + order.user.lastname + " (" + order.user.email + ") " + "<br>Order cost: $" + str(order.price) + "<br>URL: " + order.url
          leadermsg = leadermsg + "<br> Comments: " + order.details + "<hr>"
        leadermsg = leadermsg + """<br> Now, head over to The Milkman using the link below to pay for\
 your order, so that we can order the crate!<br><a href="themilkman.herokuapp.com/purchase/"""+str(bagleader.id)+""""><b>Pay for my stuff!</b></a>"""
        msg = Message(recipients=recipients, subject=subject, sender="themilkmanshipping@gmail.com")
        msg.html = msgtext + leadermsg
        mail.send(msg)
        
        for user in bag.users: # email everyone else with their order information and who the crate leader is
          if user.email != bagleader.email:
            recipients = [user.email]
            followermsg = "The crate will be shipped to " + bagleader.firstname + " " + bagleader.lastname + " (" + bagleader.email + "). Your order is: <br>" + "User: " + order.user.firstname + " " + order.user.lastname + " (" + order.user.email + ")" + "<br>Order cost: $" + str(order.price) + "<br>URL: " + order.url + "<br>Comments: " + order.details + "<hr>"
            followermsg = followermsg + """<br> Now, head over to The Milkman using the link below to pay for your order, so that we can order the crate!<br><a href="themilkman.herokuapp.com/purchase/"""+str(user.id)+""""><b>Pay for my stuff!</b></a>"""
            msg = Message(recipients=recipients, subject=subject,sender="themilkmanshipping@gmail.com")
            msg.html = msgtext + followermsg
            mail.send(msg)
  return "check your email!"
            
# Send reminder emails in case a user has not yet paid for their order
# This reminder email should happen 12 hours later ( Saturday midnight )
# Sent via Heroku Scheduler
@app.route('/reminderemail')
def reminderemail():
  localtime = time.localtime(time.time())
  dayoftheweek = localtime[6]
#  if dayoftheweek == 6:
  if dayoftheweek < 10000:
    users = User.query.all()
    with mail.connect() as conn:
      for user in users:
        # if the user has not purchased any of his or her order, send an email
        for order in user.orders:
           if not order.paid:
            subject = "hello, %s, please pay for your order on The Milkman!" % user.firstname
            msg = Message(recipients=[user.email], subject=subject, sender="themilkmanshipping@gmail.com")
            msg.html = """ Hey there, <br> Just a reminder to pay for your orders!  We know you want your stuff as soon as possible!  Click the link below to pay now! <br><br><a href="themilkman.herokuapp.com/purchase/"""+str(user.id)+""""><b>Get me my stuff!</b></a><br><br> The Milkman</p>"""
            conn.send(msg)
  return "check your email!"


@app.route('/error') # for if a user tries to view information for another user
def error():
  return render_template('error.html')

@app.route('/editorder/<orderid>', methods=['GET', 'POST'])
def editorder(orderid):
  if not session.get('logged_in'):
    abort(401)
  user = User.query.filter_by(id=session.get('userid')).first()
  if not user.isauthenticated:
    abort(401)
  valid = False
  for order in user.orders: # make sure current user is indeed involved with this order
    if str(order.id) == orderid:
      valid = True
  if not valid:
    return redirect(url_for('error'))

  # get order
  order = Order.query.filter_by(id=orderid).first()    
  
  # get bag associated with order
  bag = Bag.query.filter_by(id=order.bag_id).first()

  # data for the progress bar
  myorders = """ "width: """ + str(order.price*100 / max(bag.threshold,bag.amountinbag)) + """%;" """ 
  othersorders = """ "width: """ + str(100*(bag.amountinbag-order.price) / max(bag.threshold,bag.amountinbag)) + """%;" """


  if request.method == 'POST': #modify the order according to what user submitted
    # check the validity of input, if something is wrong, return the page with error messages where appropriate
    errorfound = False
    try:
      price = float(request.form['price'])
      if price < 0:
        flash("Invalid price", "priceerror")
        errorfound = True
    except ValueError:
      flash("Invalid price", "priceerror")
      errorfound = True

    # check if any of the input is too long
    if len(request.form['itemurl']) > 200:
      flash("That URL is too long.  Please contact us!", "urllongerr")
      errorfound = True
    if len(request.form['details']) > 400:
      flash("Looks like you've got too many details.  If you can't shorten it, please contact us!", "detailslongerr")
      errorfound = True

    # check if any fields were left empty                                                                                              
    if not request.form['itemurl']:
      flash("Please input the item's URL", "missingurlerror")
      errorfound = True
    if not request.form['price']:
      flash("Please input the price of the item", "missingpriceerror")
      errorfound = True
    if not request.form['details']:
      flash("Please enter details about your order", "missingdetailserror")
      errorfound = True
    if errorfound:
      return redirect( url_for('editorder', orderid=orderid) )

    order.bag.amountinbag = order.bag.amountinbag - order.price + float(request.form['price'])
    order.price = float(request.form['price'])
    order.url = request.form['itemurl']
    order.details = request.form['details']
    ship = False
    if 'ship' in request.form:
      ship = True
    order.ship = ship
    db_session.commit()

    flash("Your purchase of " + order.url + " has been updated for the " + order.bag.store + " bag!", "addmessage")

    # update order info for progress bar
    myorders = """ "width: """ + str(order.price*100 / max(bag.threshold,bag.amountinbag)) + """%;" """ 
    othersorders = """ "width: """ + str(100*(bag.amountinbag-order.price) / max(bag.threshold,bag.amountinbag)) + """%;" """

    return render_template('editorder.html', order=order, bag=order.bag, userid=user.id, myorders=myorders, othersorders=othersorders)
  else:
    order = Order.query.filter_by(id=orderid).first()
    return render_template('editorder.html', order=order, bag=order.bag, userid=user.id, myorders=myorders, othersorders=othersorders)

@app.route('/purchase/<userid>')
def paypal(userid):
  if not session.get('logged_in'):
    abort(401)
  if not str(session.get('userid')) == userid:
    return redirect(url_for('error'))
  # add in a tab to make the user log in if they're not already logged in..
  # need to make sure it redirects to the purchase page.
  user = User.query.filter_by(id=userid).first()
  if not user.isauthenticated:
    abort(401)
  total = 0.0
  for order in user.orders:
    total = total + order.price
  return render_template('purchase.html', user=user, total=total)

@app.route('/home', methods=['GET','POST'])
def home():
  if not session.get('logged_in'):
    abort(401)
  # store the bagid's for the featured stores on the carousel. Right now these are hard coded for simplicity, but it will be straightforward to make them dynamic.
  # urban outfitters
  urbanoutfittersid = Bag.query.filter_by(store = 'Urban Outfitters').first().id
  # ralph lauren
  ralphlaurenid = Bag.query.filter_by(store = 'Ralph Lauren').first().id
  # j. crew
  jcrewid = Bag.query.filter_by(store = 'J. Crew').first().id
  
  userid = session.get('userid')
  user = User.query.filter_by(id=userid).first()
  if not user.isauthenticated:
    abort(401)

  address = False
  if user.mailbox == -1:
    address = True

  if request.method == 'POST':
    # check to make sure the input is valid 
    errorfound = False
    try:
      mailbox = int(request.form['mailbox'])
      if mailbox < 0:
        flash("Sorry, that's not a valid mailbox number.  Please enter an integer number greater than zero", "mailboxerror")
        errorfound = True
    except ValueError:
      flash("Sorry, that's not a valid mailbox number.  Please enter an integer number greater than zero", "mailboxerror")
      errorfound = True
    if errorfound:
      return redirect(url_for('editaccount', user=user))

    user.mailbox = request.form['mailbox']
    db_session.commit()
    address = False

  # return all the bags
  allbags = Bag.query.all()
  mybags = []
  for b in user.bag:
    mybags.append(b)
  return render_template('home.html', userid=userid, urbanoutfittersid=urbanoutfittersid, ralphlaurenid=ralphlaurenid, jcrewid=jcrewid, mybags=mybags, allbags=allbags, address=address, myorders=user.orders)

# about page
@app.route('/about')
def about():
  if not session.get('logged_in'):
    abort(401)
  return render_template('about.html', userid=session.get('userid'))

# how it works page
@app.route('/howitworks')
def howitworks():
  return render_template('howitworks.html')

# sourmilk page
@app.route('/sourmilk')
def sourmilk():
  if not session.get('logged_in'):
    abort(401)
  return render_template('sourmilk.html', userid=session.get('userid'))

# account information page
@app.route('/mymilk/<userid>')
def mymilk(userid):
  if not session.get('logged_in'):
    abort(401)
  user = User.query.filter_by(id=userid).first()
  if not user.isauthenticated:
    abort(401)
  return render_template('mymilk.html', user=user, userid=userid)

# edit account information
@app.route('/mymilk/edit/<userid>', methods=['GET','POST'])
def editaccount(userid):
  if not session.get('logged_in'):
    abort(401)
  if not str(session.get('userid')) == userid:
    return redirect(url_for('error'))
  user = User.query.filter_by(id=userid).first()
  if not user.isauthenticated:
    abort(401)
  errorfound = False

  if request.method == 'POST':
    # check the validity of the input, return error messages if necessary
    if len(request.form['email']) > 40:
      flash("Sorry, your email address is simply too long!", "emailerror")
      errorfound = True
    
    if len(request.form['firstname']) > 30:
      flash("Sorry, your first name is too long... take it up with your parents.", "fnameerror")
      errorfound = True

    if len(request.form['lastname']) > 30:
      flash("Sorry, your last name is too long... best marry someone with a shorter last name..", "lnameerror")
      errorfound = True

    try:
      mailbox = int(request.form['mailbox'])
      if mailbox < 0:
        errorfound = True
    except ValueError:
      flash("Invalid mailbox number", "mailboxerror")
      errorfound = True

    # check if any fields were left empty
    if not request.form['firstname']:
      flash("Please enter your first name", "missingfnameerror")
      errorfound = True
    if not request.form['lastname']:
      flash("Please input the price of the item", "missinglnameerror")
      errorfound = True
    if not request.form['email']:
      flash("Please enter details about your order", "missingemailerror")
      errorfound = True
    if not request.form['mailbox']:
      flash("Please enter your mailbox number", "missingmailboxerror")
      errorfound = True
    if errorfound:
      return redirect( url_for('editaccount', userid=userid) )

    # if no errors, proceed!
    user.firstname = request.form['firstname']
    user.lastname = request.form['lastname']
    user.email = request.form['email']    
    user.mailbox = request.form['mailbox']
    db_session.commit()
    flash("Your information has been updated!", "accountedit")
    return redirect(url_for('mymilk', userid=userid))
  
  return render_template('accountedit.html', user=user)

# delete account
@app.route('/deleteaccount/<userid>')
def deleteaccount(userid):
  if not session.get('logged_in'):
    abort(401)
  if not str(session.get('userid')) == userid:
    return redirect(url_for('error'))
  u = User.query.filter_by(id=userid).first()
  if not u.isauthenticated:
    abort(401)
  db_session.delete(u)
  db_session.commit()
  pop_login_session()
  return redirect(url_for('fblogin'))

# my networks 
@app.route('/mynetworks/<userid>')
def mynetworks(userid):
  if not session.get('logged_in'):
    abort(401)
  if not str(session.get('userid')) == userid:
    return redirect(url_for('error'))
  allbags = Bag.query.all()
  return render_template('mynetworks.html', userid=userid, allbags=allbags)

# all bags
@app.route('/allbags')
def allbags():
  if not session.get('logged_in'):
    abort(401)
  allbags = Bag.query.all()
  return render_template('allbags.html', userid=session.get('userid'), allbags=allbags)

# a test page for the admin
#@app.route('/all')
#def all():
#  if not session.get('logged_in'):
#    abort(401)
#  entries = ""
#  for row in User.query.all():
#    entries = entries + "first name: " + row.firstname + '<br>'
#    entries = entries + "last name: " + row.lastname + '<br>'
#    entries = entries + "mailbox: " + row.mailbox + '<br>'
#    entries = entries + "email: " + row.email + '<br><br>'
#    for row2 in row.bag:
#      entries = entries + "bags involved: " + str(row2.store) + '<br>'
#    for row2 in row.orders:
#      entries = entries + "order: " + str(row2.price) + '<br>'
#      
#  entries = entries + "<br><br><br><br><br>Now, the Bags:<br>"
#    
#  for row in Bag.query.all():
#    entries = entries + "store name: " + row.store + "<br>"
#    entries = entries + "threshold: " + str(row.threshold) + "<br>"
#    entries = entries + "amount in bag: " + str(row.amountinbag) + "<br>"
#    entries = entries + "network: " + row.network + "<br>"
#    for row2 in row.users:
#      entries = entries + "user in bag: " + str(row2.firstname) + '<br>'
#    for row2 in row.orders:
#      entries = entries + "order: " + str(row2.price) + '<br>'
#    entries = entries + "<br><br>"
#  return entries

#@app.route('/newbag', methods=['GET', 'POST']) #create a new crate
# disabled so that only admins (we) can create new bags through Heroku database command line)
#def newbag():
#  if not session.get('logged_in'):
#    abort(401)
#  if request.method == 'POST':
#    bag = Bag(request.form['store'], request.form['threshold'], 0, request.form['network'])
#    db_session.add(bag)
#    db_session.commit()
#    return redirect(url_for('home'))
#  return render_template('newbagform.html')

# shows all of the relevant information for a store's bag
@app.route('/bag/<bagid>', methods=['GET', 'POST'])
def bagpage(bagid):
  if not session.get('logged_in'):
    abort(401)
  user = User.query.filter_by(id=session.get('userid')).first()
  if not user.isauthenticated:
    abort(401)
  redir = False
  for order in user.orders:
    if str(order.bag.id) == bagid:
      redir = True
      orderid = order.id
  if redir:
    return redirect(url_for('editorder', orderid=orderid))
  bag = Bag.query.filter_by(id=bagid).first()

    # update order info for progress bar
  percentfull = """ "width: """ + str(bag.amountinbag*100 / max(bag.threshold,bag.amountinbag)) + """%;" """ 
  percentempty = """ "width: """ + str(100-100*bag.amountinbag / max(bag.threshold,bag.amountinbag)) + """%;" """
  
  if request.method == 'POST':
    # check the validity of input, if something is wrong, return the page with error messages where appropriate
    errorfound = False
    try:
      price = float(request.form['price'])
      if price < 0:
        flash("Invalid price", "priceerror")
        errorfound = True
    except ValueError:
      flash("Invalid price", "priceerror")
      errorfound = True

    # check if any of the input is too long
    if len(request.form['itemurl']) > 200:
      flash("That URL is too long.  Please contact us!", "urllongerr")
      errorfound = True
    if len(request.form['details']) > 400:
      flash("Looks like you've got too many details.  If you can't shorten it, please contact us!", "detailslongerr")
      errorfound = True

    # check if any fields were left empty
    if not request.form['itemurl']:
      flash("Please input the item's URL", "missingurlerror")
      errorfound = True
    if not request.form['price']:
      flash("Please input the price of the item", "missingpriceerror")
      errorfound = True
    if not request.form['details']:
      flash("Please enter details about your order", "missingdetailserror")
      errorfound = True
    if errorfound:
      return redirect(url_for('bagpage', bagid=bagid))


    bag.amountinbag = bag.amountinbag + price
    # add the user to the bag
    user = User.query.filter_by(id=session.get('userid')).first()
    bag.users.append(user)

    ship = False
    if 'ship' in request.form:
      ship = True

    # add the user's order to the bag
    order = Order(request.form['itemurl'], request.form['price'], request.form['details'], ship, None, None, None, None, None, bag.id, user.id)
    bag.orders.append(order)
    db_session.add(order)
    db_session.commit()
    flash("Your purchase of " + order.url + " has been added to the " + bag.store + " bag!", "addmessage")
    # update order info for progress bar
    percentfull = """ "width: """ + str(int(bag.amountinbag*100 / max(bag.threshold,bag.amountinbag))) + """%;" """ 
    percentempty = """ "width: """ + str(100-int(100*bag.amountinbag / max(bag.threshold,bag.amountinbag))) + """%;" """

    return redirect(url_for('bagpage', bagid=bagid))
  return render_template('bagpage.html', percentempty=percentempty, percentfull=percentfull, bag=bag, userid=session.get('userid'))


# displays all of the users' bags
@app.route('/mybags/<userid>')
def mybags(userid):
  if not session.get('logged_in'):
    abort(401)
  if not str(session.get('userid')) == userid:
    return redirect(url_for('error'))
  user = User.query.filter_by(id = userid).first()  
  if not user.isauthenticated:
    abort(401)
  userbags = Bag.query.join(Bag.users, aliased=True).filter_by(id=userid)
  userorders = []
  bags = ""
  for bag in userbags:
    tuple = (Order.query.filter_by(bag_id=int(bag.id), user_id=userid).all(), str(bag.store))
    userorders.append(tuple)
  return render_template('mybags.html', myorders=user.orders, mybags=userbags, userorders=userorders, userid=user.id, user=user)

# confirmation page for removing an order
@app.route('/removeorder/<orderid>')
def removeorder(orderid):
  if not session.get('logged_in'):
    abort(401)
  order = Order.query.filter_by(id=orderid).first()
  bag = Bag.query.filter_by(id=order.bag_id).first()
  return render_template('removeorder.html', order=order, bag=bag, userid=session.get('userid'))

# removed order, link back to original page
@app.route('/removed/<orderid>')
def removed(orderid):
  if not session.get('logged_in'):
    abort(401)
  order = Order.query.filter_by(id=orderid).first()
  bag = Bag.query.filter_by(id=order.bag_id).first()
  bag.amountinbag = bag.amountinbag - order.price

  # delete the order
  db_session.delete(order)  
  db_session.commit()

  # if the user has no more orders from that store, remove that store from the user's bags
  user = User.query.filter_by(id=session.get('userid')).first()
  orders = Order.query.filter_by(bag_id=bag.id, user_id=user.id).all()
  if not orders:
    user.bag.remove(bag)
    db_session.commit()

  return render_template('removed.html', userid=user.id, bag=bag)


#----------------------------------------
# facebook authentication, based on Ryan Shea's tutorial on his blog
#----------------------------------------


FACEBOOK_APP_ID = '366391460148417'
FACEBOOK_APP_SECRET = '30806e2f0f0308ba2f0adc634455d231'

oauth = OAuth()

facebook = oauth.remote_app('facebook',
    base_url='https://graph.facebook.com/',
    request_token_url=None,
    access_token_url='/oauth/access_token',
    authorize_url='https://www.facebook.com/dialog/oauth',
    consumer_key=FACEBOOK_APP_ID,
    consumer_secret=FACEBOOK_APP_SECRET,
    request_token_params={'scope': ('email, ')}
)

@facebook.tokengetter
def get_facebook_token():
  return session.get('facebook_token')

def pop_login_session():
  session.pop('logged_in', None)
  session.pop('facebook_token', None)

@app.route("/facebook_login")
def facebook_login():
  return facebook.authorize(callback=url_for('facebook_authorized',next=request.args.get('next'), _external=True))

@app.route("/facebook_authorized")
@facebook.authorized_handler
def facebook_authorized(resp):
    next_url = request.args.get('next') or url_for('home')
    if resp is None or 'access_token' not in resp:
        return redirect(next_url)

    session['facebook_token'] = (resp['access_token'], '')
    fbuser = facebook.get('/me').data
    if User.query.filter_by(email = fbuser['email']).first() == None:
      user = User(fbuser['first_name'], fbuser['last_name'], fbuser['email'], -1, '')
      db_session.add(user)
      db_session.commit()
    
    user = User.query.filter_by(email = fbuser['email']).first()
    session['userid'] = user.id

    if user.isauthenticated:
      session['logged_in'] = True
      return redirect(url_for('home'))
    return redirect(url_for('cas'))

@app.route("/logout")
def logout():
    pop_login_session()
    return redirect(url_for('fblogin'))

